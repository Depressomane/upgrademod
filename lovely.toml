[manifest]
version = "1.0.0"
dump_lua = true
priority = 0


# JOKERS


# MULT

# Ceremonial Dagger: adds 3x / 4x / 5x sell value
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.mult = self.ability.mult + sliced_card.sell_cost*2"
position = "at" # before, after, or at
payload = "self.ability.mult = self.ability.mult + sliced_card.sell_cost*(2 + ((mult_level-1) * 1))"
match_indent = true

# Shoot The Moon: +15 / +17 / +19 mult
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "h_mult = 13,"
position = "at" # before, after, or at
payload = "h_mult = 13 + ((mult_level-1) * 2),"
match_indent = true

# Raised Fist: 3x / 4x / 5x lowest card to mult
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "h_mult = 2*temp_Mult,"
position = "at" # before, after, or at
payload = "h_mult = temp_Mult * (2+((mult_level-1) * 1)),"
match_indent = true

# Supernova: adds double / triple / quadruple the number of times poker hand played to mult
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "mult_mod = G.GAME.hands[context.scoring_name].played"
position = "at" # before, after, or at
payload = "mult_mod = G.GAME.hands[context.scoring_name].played * mult_level"
match_indent = true

# Swashbuckler: adds 1.5x / 2x / 2.5x the sell value to mult
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.mult = sell_cost"
position = "at" # before, after, or at
payload = "self.ability.mult = math.floor(sell_cost*(1+((mult_level-1)/2)))"
match_indent = true


# XMULT

# Joker Stencil: gives X1.2 / X1.4 / X1.6 per unused joker slot
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.x_mult = (G.jokers.config.card_limit - #G.jokers.cards)"
position = "at" # before, after, or at
payload = "self.ability.x_mult = (G.jokers.config.card_limit - #G.jokers.cards) * (1 + (xmult_level-1)*0.25)"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if G.jokers.cards[i].ability.name == 'Joker Stencil' then self.ability.x_mult = self.ability.x_mult + 1 end"
position = "at" # before, after, or at
payload = "if G.jokers.cards[i].ability.name == 'Joker Stencil' then self.ability.x_mult = self.ability.x_mult + (1 + (xmult_level-1)*0.25) end"
match_indent = true

# Glass Joker: respond to breaking of cards from Level 2 Immolate
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Glass Joker' and not context.blueprint and context.consumeable.ability.name == 'The Hanged Man'  then"
position = "at" # before, after, or at
payload = "if self.ability.name == 'Glass Joker' and not context.blueprint and ((context.consumeable.ability.name == 'The Hanged Man') or (context.consumeable.ability.name == 'Immolate' and spectral_level >= 2)) then"
match_indent = true

# Driver's License: triggers on 14 / 12 / 10 enhanced cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if (self.ability.driver_tally or 0) >= 16 then "
position = "at" # before, after, or at
payload = "if (self.ability.driver_tally or 0) >= math.max(0, (16 - (xmult_level-1)*2)) then "
match_indent = true

# Flower Pot and Seeing Double: level 3 gives Xmult for a single wild card
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "['Spades'] = 0,"
position = "after" # before, after, or at
payload = "['Wilds'] = 0,"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """if (suits["Hearts"] > 0 or"""
position = "at" # before, after, or at
payload = """if ((suits["Hearts"] > 0 or"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """if suits["Hearts"] > 0 and"""
position = "at" # before, after, or at
payload = """if (suits["Hearts"] > 0 and"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """suits["Clubs"] > 0 then"""
position = "at" # before, after, or at
payload = """suits["Clubs"] > 0) or (suits["Wilds"] > 0) then"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """if context.scoring_hand[i].ability.name == 'Wild Card' or context.scoring_hand[i].config.center.any_suit then"""
position = "after" # before, after, or at
payload = """if xmult_level >= 2 then suits["Wilds"] = suits["Wilds"] + 1 end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """if context.scoring_hand[i]:is_suit('Hearts', true) and suits["Hearts"] == 0 then suits["Hearts"] = suits["Hearts"] + 1"""
position = "before" # before, after, or at
payload = """if xmult_level == 1 then"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """elseif context.scoring_hand[i]:is_suit('Clubs', true) and suits["Clubs"] == 0  then suits["Clubs"] = suits["Clubs"] + 1 end"""
position = "after" # before, after, or at
payload = """elseif xmult_level >= 2 then
  if context.scoring_hand[i]:is_suit('Hearts') and suits["Hearts"] == 0 then suits["Hearts"] = suits["Hearts"] + 1 end
  if context.scoring_hand[i]:is_suit('Diamonds') and suits["Diamonds"] == 0 then suits["Diamonds"] = suits["Diamonds"] + 1 end
  if context.scoring_hand[i]:is_suit('Spades') and suits["Spades"] == 0 then suits["Spades"] = suits["Spades"] + 1 end
  if context.scoring_hand[i]:is_suit('Clubs') and suits["Clubs"] == 0 then suits["Clubs"] = suits["Clubs"] + 1 end
end"""
match_indent = true


# ECON

# Business Card: gives $2 / $3 / $4
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + 2"
position = "at" # before, after, or at
payload = "G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + 2 + ((econ_level-1) * 1)"
match_indent = true

# Trading Card: at level 2, every hand counts at the first hand
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local eval = function() return G.GAME.current_round.discards_used == 0 and not G.RESET_JIGGLES end"
position = "at" # before, after, or at
payload = "local eval = function() return (G.GAME.current_round.discards_used == 0 or (G.GAME.current_round.discards_used >= 0 and econ_level >= 2)) and not G.RESET_JIGGLES end"
match_indent = true


# EFFECT

# Riff-Raff: creates 3 / 4 / 5 jokers
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local jokers_to_create = math.min(2, G.jokers.config.card_limit - (#G.jokers.cards + G.GAME.joker_buffer))"
position = "at" # before, after, or at
payload = "local jokers_to_create = math.min((effect_level+1), G.jokers.config.card_limit - (#G.jokers.cards + G.GAME.joker_buffer))"
match_indent = true

# Chaos the Clown: gives 2 / 3 / 4 free rerolls
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls + 1"
position = "at" # before, after, or at
payload = "G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls + effect_level"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls - 1"
position = "at" # before, after, or at
payload = "G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls - effect_level"
match_indent = true

# Sixth Sense: gives 1 / 2 / 3 spectral cards, level 2 allows this to happen on any hand, not just the first; level 3 allows blueprint/brainstorm compatibility
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Sixth Sense' and #context.full_hand == 1 and context.full_hand[1]:get_id() == 6 and G.GAME.current_round.hands_played == 0 then"
position = "at" # before, after, or at
payload = "if self.ability.name == 'Sixth Sense' and #context.full_hand == 1 and context.full_hand[1]:get_id() == 6 and (G.GAME.current_round.hands_played == 0 or effect_level >= 2) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif context.destroying_card and not context.blueprint then"
position = "at" # before, after, or at
payload = "elseif (context.destroying_card and effect_level >= 3) or (context.destroying_card and not context.blueprint) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Spectral',G.consumeables, nil, nil, nil, nil, nil, 'sixth')"
position = "before" # before, after, or at
payload = """for i = 1, math.max(1, effect_level-1) do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.consumeable_buffer = 0"
position = "after" # before, after, or at
payload = """end
end"""
match_indent = true

# Superposition: creates 2 / 3 / 4 tarot cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card(card_type,G.consumeables, nil, nil, nil, nil, nil, 'sup')"
position = "before" # before, after, or at
payload = """for i = 1, effect_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# Seance: creates 2 / 3 / 4 spectral cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Spectral',G.consumeables, nil, nil, nil, nil, nil, 'sea')"
position = "before" # before, after, or at
payload = """for i = 1, effect_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# Hallucination: creates 2 / 3 / 4 tarot cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Tarot',G.consumeables, nil, nil, nil, nil, nil, 'hal')"
position = "before" # before, after, or at
payload = """for i = 1, effect_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# Cartomancer: creates 2 / 3 / 4 tarot cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Tarot',G.consumeables, nil, nil, nil, nil, nil, 'car')"
position = "before" # before, after, or at
payload = """for i = 1, effect_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# 8 Ball: creates 2 / 3 / 4 tarot cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "                                            local card = create_card('Tarot',G.consumeables, nil, nil, nil, nil, nil, '8ba')"
position = "before" # before, after, or at
payload = """for i = 1, effect_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# Vagabond: creates 2 / 3 / 4 tarot cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Tarot',G.consumeables, nil, nil, nil, nil, nil, 'vag')"
position = "before" # before, after, or at
payload = """for i = 1, effect_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# Seltzer: retriggers 2 / 3 / 4 times
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "repetitions = 1,"
position = "at" # before, after, or at
payload = "repetitions = effect_level,"
match_indent = true

# DNA: level 3 allows any hand, not just first
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local eval = function() return G.GAME.current_round.hands_played == 0 end"
position = "at" # before, after, or at
payload = "local eval = function() return (G.GAME.current_round.hands_played == 0 or (G.GAME.current_round.hands_played >= 0 and effect_level >= 3)) and not G.RESET_JIGGLES end"
match_indent = true

# Diet Cola: gives 2 / 3 / 4 double tags
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Diet Cola' then"
position = "after" # before, after, or at
payload = "for i = 1, effect_level do"
match_indent = true

# Invisible Joker: requires 1 / 0 / 0 rounds; level 3 always chooses leftmost joker; level 4 no longer removes Negative from copy
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Invisible Joker' and (self.ability.invis_rounds >= self.ability.extra) and not context.blueprint then"
position = "before" # before, after, or at
payload = "end"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local chosen_joker = pseudorandom_element(jokers, pseudoseed('invisible'))"
position = "after" # before, after, or at
payload = """if effect_level >= 3 then
  chosen_joker = G.jokers.cards[1]
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if card.ability.invis_rounds then card.ability.invis_rounds = 0 end"
position = "after" # before, after, or at
payload = """if card.edition and card.edition.negative then
  if effect_level <= 3 then card:set_edition(nil, true) end
end"""
match_indent = true

# Level 3+ Invisible Joker sells for $0 to prevent one from selling one Invisible Joker to duplicate another and getting infinite money
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.sell_cost = math.max(1, math.floor(self.cost/2)) + (self.ability.extra_value or 0)"
position = "after" # before, after, or at
payload = "if self.ability.name == 'Invisible Joker' and effect_level >= 3 then self.sell_cost = 0 end"
match_indent = true


# Burnt Joker: upgrades the hand by 2 / 3 / 4 levels; level 4 upgrades any discarded hand
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "level_up_hand(context.blueprint_card or self, text, nil, 1)"
position = "at" # before, after, or at
payload = "level_up_hand(context.blueprint_card or self, text, nil, effect_level)"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Burnt Joker' and G.GAME.current_round.discards_used <= 0 and not context.hook then"
position = "at" # before, after, or at
payload = "if self.ability.name == 'Burnt Joker' and ((G.GAME.current_round.discards_used <= 0 and not context.hook) or effect_level >= 4) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Trading Card' and not context.blueprint then"
position = "before" # before, after, or at
payload = """if self.ability.name == 'Burnt Joker' and not context.blueprint then
  local eval = function() return (G.GAME.current_round.discards_used == 0 or (G.GAME.current_round.discards_used >= 0 and effect_level >= 2)) and not G.RESET_JIGGLES end
  juice_card_until(self, eval, true)
end"""
match_indent = true

# Mr. Bones: prevents death at 2.5%, 0.25%, 0.025% etc.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.chips/G.GAME.blind.chips >= 0.25 then"
position = "at" # before, after, or at
payload = "(G.GAME.chips/G.GAME.blind.chips) >= (2.5 / (10^effect_level)) then"
match_indent = true

# Oops! All 6s: multiplies probabilities by 3 / 4 / 5 etc.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.probabilities[k] = v/2"
position = "at" # before, after, or at
payload = "G.GAME.probabilities[k] = v/(effect_level+1)"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.probabilities[k] = v*2"
position = "at" # before, after, or at
payload = "G.GAME.probabilities[k] = v*(effect_level+1)"
match_indent = true

# Chicot: reduces blind level by 2 / 3 / 4
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Chicot' and G.GAME.blind and G.GAME.blind.boss and not G.GAME.blind.disabled then"
position = "at" # before, after, or at
payload = """if self.ability.name == 'Chicot' and not self.debuff then
  if not (G.GAME.blind and ((not G.GAME.blind.disabled) and (G.GAME.blind:get_type() == 'Boss'))) then
    blind_level_chicot_luchador("chicot created")
  end
end
if false then -- Old Chicot"""
match_indent = true


# CONSUMABLES

# General probability change for Aura and Wheel of Fortune:

# Level 1: 50% foil, 35% holo, 15% poly
# Level 2: 40% foil, 30% holo, 30% poly
# Level 3: 30% foil, 25% holo, 45% poly
# Level 4: 20% foil, 20% holo, 60% poly
# Level 5: 10% foil, 15% holo, 75% poly
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:set_base(card, initial)"
position = "before" # before, after, or at
payload = """local last_consumable = nil
function poll_edition2(_key, _mod, _no_neg, _guaranteed)
    _mod = _mod or 1
    local edition_poll = pseudorandom(pseudoseed(_key or 'edition_generic'))
    if _key == 'aura' then
            if edition_poll > 0.85 - (0.15*spectral_level) then
                return {polychrome = true}
            elseif edition_poll > 0.5 - (0.1*spectral_level) then
                return {holo = true}
            else
                return {foil = true}
            end
    elseif _key == 'wheel_of_fortune' then
            if edition_poll > 0.85 - (0.15*tarot_level) then
                return {polychrome = true}
            elseif edition_poll > 0.5 - (0.1*tarot_level) then
                return {holo = true}
            else
                return {foil = true}
            end
    elseif _guaranteed then
            if edition_poll > 1 - 0.003*25 and not _no_neg then
            return {negative = true}
        elseif edition_poll > 1 - 0.006*25 then
            return {polychrome = true}
        elseif edition_poll > 1 - 0.02*25 then
            return {holo = true}
        elseif edition_poll > 1 - 0.04*25 then
            return {foil = true}
        end
    else
        if edition_poll > 1 - 0.003*_mod and not _no_neg then
            return {negative = true}
        elseif edition_poll > 1 - 0.006*G.GAME.edition_rate*_mod then
            return {polychrome = true}
        elseif edition_poll > 1 - 0.02*G.GAME.edition_rate*_mod then
            return {holo = true}
        elseif edition_poll > 1 - 0.04*G.GAME.edition_rate*_mod then
            return {foil = true}
        end
    end
    return nil
end
"""
match_indent = true


# TAROTS

# Temperance
# Level 1: vanilla
# Level 2: gives 1.5X sell value, max $70
# Level 3: gives 2X sell value, max $90 etc.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.money = math.min(self.ability.money, self.ability.extra)"
position = "at" # before, after, or at
payload = "self.ability.money = math.min(math.floor(self.ability.money*(1 + (tarot_level-1)/2)), self.ability.extra)"
match_indent = true

# Hermit
# Level 1: vanilla
# Level 2: gives 2.5X money, max $30
# Level 3: gives 3X money, max $40 etc.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "ease_dollars(math.max(0,math.min(G.GAME.dollars, self.ability.extra)), true)"
position = "at" # before, after, or at
payload = "ease_dollars(math.max(0,math.min(math.floor(G.GAME.dollars * (2 + (tarot_level-1)/2)), self.ability.extra)), true)"
match_indent = true

# Wheel of Fortune
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "edition = poll_edition('wheel_of_fortune', nil, true, true)"
position = "at" # before, after, or at
payload = """edition = poll_edition2('wheel_of_fortune', nil, true, true)
if tarot_level >= 3 then
  eligible_card = G.jokers.cards[1]
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if next(self.eligible_strength_jokers) then return true end"
position = "at" # before, after, or at
payload = """if tarot_level == 3 then
  if not G.jokers.cards[1].edition then return true end
elseif tarot_level <= 2 then
  if next(self.eligible_strength_jokers) then return true end
else
  return true
end"""
match_indent = true


# PLANETS
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "level_up_hand(used_tarot, self.ability.consumeable.hand_type)"
position = "at" # before, after, or at
payload = "level_up_hand(used_tarot, self.ability.consumeable.hand_type, nil, planet_level)"
match_indent = true


# SPECTRALS

# General check of usability for higher-level Sigil, Ouija, and Immolate
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "and #G.hand.cards > 1 then"
position = "after" # before, after, or at
payload = """if (self.ability.name == 'Sigil' and spectral_level >= 2 and (G.hand and (#G.hand.highlighted == 0 or #G.hand.highlighted >= 2))) then
  return false
elseif (self.ability.name == 'Ouija' and spectral_level >= 3 and (G.hand and (#G.hand.highlighted == 0 or #G.hand.highlighted >= 2))) then
  return false
elseif (self.ability.name == 'Immolate' and spectral_level >= 2 and (G.hand and (#G.hand.highlighted == 0))) then
  return false
end
"""
match_indent = true

# Planned:
# Familiar is getting an overhaul
# Grim is getting an overhaul
# Incantation is getting an overhaul

# Black Hole
# Level 1: vanilla
# Level 2: upgrades all poker hands by 3 levels
# Level 3: upgrades all poker hands by 5 levels etc.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "level_up_hand(self, k, true)"
position = "at" # before, after, or at
payload = "level_up_hand(self, k, true, (spectral_level*2)-1)"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level='+1'})"
position = "at" # before, after, or at
payload = "update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level='+'..((spectral_level*2)-1)})"
match_indent = true

# Cryptid
# Level 1: vanilla
# Level 2: creates 3 copies of card
# Level 3: creates 4 copies of card etc.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "for i = 1, self.ability.extra do"
position = "at" # before, after, or at
payload = "for i = 1, spectral_level+1 do"
match_indent = true

# Aura
# Level 1: vanilla
# Level 2: editions on 2 cards
# Level 3: editions on 3 cards, editions can be overwritten
# Level 4: editions on 4 cards
# Level 5: editions on 5 cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if G.hand and (#G.hand.highlighted == 1) and G.hand.highlighted[1] and (not G.hand.highlighted[1].edition) then return true end"
position = "at" # before, after, or at
payload = """if spectral_level == 1 then
  if G.hand and (#G.hand.highlighted == 1) and G.hand.highlighted[1] and (not G.hand.highlighted[1].edition) then return true end
elseif spectral_level == 2 then
  if G.hand and (#G.hand.highlighted <= 2) and G.hand.highlighted[1] and (not G.hand.highlighted[1].edition) and (not G.hand.highlighted[2].edition) then return true end
else
  if G.hand and (#G.hand.highlighted <= spectral_level) and G.hand.highlighted[1] then return true end
end 
"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "aura_card:set_edition(edition, true)"
position = "before" # before, after, or at
payload = """for i = 1, #G.hand.highlighted, 1 do
  edition = poll_edition2('aura', nil, true, true)
  aura_card = G.hand.highlighted[i]
"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "aura_card:set_edition(edition, true)"
position = "after" # before, after, or at
payload = "end"
match_indent = true

# Wraith
# Level 1: vanilla
# Level 2: money set to 33%
# Level 3: money set to 67%
# Level 4: money doesn't decrease at all
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if G.GAME.dollars ~= 0 then"
position = "at" # before, after, or at
payload = "if G.GAME.dollars ~= 0 and spectral_level <= 4 then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "ease_dollars(-G.GAME.dollars, true)"
position = "at" # before, after, or at
payload = """if spectral_level <= 3 then
  ease_dollars(-G.GAME.dollars*(math.floor(1 - (spectral_level-1)/3)), true)
end"""
match_indent = true

# Ectoplasm
# Level 1: vanilla
# Level 2: no longer reduces hand size
# Level 3: always selects leftmost joker
# Level 4: negative can override other editions
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "edition = {negative = true}"
position = "after" # before, after, or at
payload = """if spectral_level >= 3 then
  eligible_card = G.jokers.cards[1]
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.hand:change_size(-G.GAME.ecto_minus)"
position = "at" # before, after, or at
payload = """if spectral_level == 1 then
  G.hand:change_size(-G.GAME.ecto_minus)
end"""
match_indent = true

# Ankh
# Level 1: vanilla
# Level 2: no longer destroys other jokers
# Level 3: always selects leftmost joker
# Level 4: no longer removes negative from copies
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local chosen_joker = pseudorandom_element(G.jokers.cards, pseudoseed('ankh_choice'))"
position = "after" # before, after, or at
payload = """if spectral_level >= 3 then
  chosen_joker = G.jokers.cards[1]
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "card:set_edition(nil, true)"
position = "at" # before, after, or at
payload = "if spectral_level <= 3 then card:set_edition(nil, true) end"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = copy_card(chosen_joker, nil, nil, nil, chosen_joker.edition and chosen_joker.edition.negative)"
position = "at" # before, after, or at
payload = "local card = copy_card(chosen_joker, nil, nil, nil, false)"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.E_MANAGER:add_event(Event({trigger = 'before', delay = 0.75, func = function()"
position = "before" # before, after, or at
payload = "if spectral_level == 1 then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.E_MANAGER:add_event(Event({trigger = 'before', delay = 0.4, func = function()"
position = "before" # before, after, or at
payload = """    if not (G.GAME.blind and ((not G.GAME.blind.disabled) and (G.GAME.blind:get_type() == 'Boss'))) then
      blind_level_chicot_luchador("ankh")
     end
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if #G.jokers.cards >= G.jokers.config.card_limit then"
position = "at" # before, after, or at
payload = "if ((#G.jokers.cards >= G.jokers.config.card_limit) and (spectral_level <= 3)) or ((#G.jokers.cards >= G.jokers.config.card_limit) and (spectral_level >= 4) and (not (G.jokers.cards[1].edition and G.jokers.cards[1].edition.negative))) then"
match_indent = true

# Hex
# Level 1: vanilla
# Level 2: no longer destroys other jokers
# Level 3: always selects leftmost joker
# Level 4: polychrome can override other editions
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Hex' then"
position = "at" # before, after, or at
payload = "if self.ability.name == 'Hex' and spectral_level == 1 then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "edition = {polychrome = true}"
position = "after" # before, after, or at
payload = """if spectral_level >= 3 then
  eligible_card = G.jokers.cards[1]
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if v ~= eligible_card and (not v.ability.eternal) then v:start_dissolve(nil, _first_dissolve);_first_dissolve = true end"
position = "after" # before, after, or at
payload = """end
if true then
    if not (G.GAME.blind and ((not G.GAME.blind.disabled) and (G.GAME.blind:get_type() == 'Boss'))) then
      blind_level_chicot_luchador("hex")
    end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if next(self.eligible_editionless_jokers) then return true end"
position = "at" # before, after, or at
payload = """if spectral_level == 3 then
  if not G.jokers.cards[1].edition then return true end
elseif spectral_level <= 2 then
  if next(self.eligible_editionless_jokers) then return true end
else
  return true
end"""
match_indent = true


# ENHANCEMENTS

# Wild Card
# Level 2: immune to debuffs
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.debuff.suit and card:is_suit(self.debuff.suit, true) then"
position = "at" # before, after, or at
payload = "if self.debuff.suit and card:is_suit(self.debuff.suit, true) and not ((card.ability.name == 'Wild Card' and enhance_level >= 2) or blind_level <= 0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.debuff.is_face =='face' and card:is_face(true) then"
position = "at" # before, after, or at
payload = "if self.debuff.is_face =='face' and card:is_face(true) and not ((card.ability.name == 'Wild Card' and enhance_level >= 2) or blind_level <= 0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'The Pillar' and card.ability.played_this_ante then"
position = "at" # before, after, or at
payload = "if self.name == 'The Pillar' and card.ability.played_this_ante and not ((card.ability.name == 'Wild Card' and enhance_level >= 2) or blind_level <= 0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.debuff.value and self.debuff.value == card.base.value then"
position = "at" # before, after, or at
payload = "if self.debuff.value and self.debuff.value == card.base.value and not ((card.ability.name == 'Wild Card' and enhance_level >= 2) or blind_level <= 0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.debuff.nominal and self.debuff.nominal == card.base.nominal then"
position = "at" # before, after, or at
payload = "if self.debuff.nominal and self.debuff.nominal == card.base.nominal and not ((card.ability.name == 'Wild Card' and enhance_level >= 2) or blind_level <= 0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'Crimson Heart' and not self.disabled and card.area == G.jokers then"
position = "before" # before, after, or at
payload = """if self.name == 'Verdant Leaf' and not self.disabled and card.area ~= G.jokers then
  if ((card.ability.name == 'Wild Card' and enhance_level >= 2) or blind_level <= 0) then
    card:set_debuff(false)
    return
  else
    card:set_debuff(true)
    if card.debuff then card.debuffed_by_blind = true end
    return
  end
end"""
match_indent = true

# Lucky Card
# Level 1: vanilla
# Level 2: 1/4 to give +24 mult, 1/13 to give $25
# Level 3: 1/3 to give +28 mult, 1/11 to give $30
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if pseudorandom('lucky_mult') < G.GAME.probabilities.normal/5 then"
position = "at" # before, after, or at
payload = "if pseudorandom('lucky_mult') < G.GAME.probabilities.normal/math.max(1, (5 - (enhance_level-1))) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if pseudorandom('lucky_money') < G.GAME.probabilities.normal/15 then"
position = "at" # before, after, or at
payload = "if pseudorandom('lucky_money') < G.GAME.probabilities.normal/math.max(1, (15 - 2*(enhance_level-1))) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.p_dollars > 0 then"
position = "after" # before, after, or at
payload = """if self.ability.effect == 'Lucky Card' and self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 then
  if pseudorandom('lucky_money') < G.GAME.probabilities.normal/math.max(1, (15 - 2*(enhance_level-1))) then
    ret = ret -  self.ability.p_dollars
    return ret
  end
elseif self.debuff then
  return 0
end"""
match_indent = true


# SEALS (edition_level is for both editions and seals)

# Blue Seal
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card(card_type,G.consumeables, nil, nil, nil, nil, _planet, 'blusl')"
position = "before" # before, after, or at
payload = """for i = 1, edition_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# Purple Seal
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Tarot',G.consumeables, nil, nil, nil, nil, nil, '8ba')"
position = "before" # before, after, or at
payload = """for i = 1, edition_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# Red Seal
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "repetitions = 1,"
position = "at" # before, after, or at
payload = "repetitions = edition_level,"
match_indent = true

# Gold Seal
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "ret = ret +  3"
position = "at" # before, after, or at
payload = """if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 then
  ret = ret -  (3 + (2*(edition_level-1)))
  print("value: "..ret)
elseif self.debuff then
  return 0
else
  ret = ret +  (3 + (2*(edition_level-1)))
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local ret = 0"
position = "before" # before, after, or at
payload = "end"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_p_dollars()"
position = "after" # before, after, or at
payload = "if false then"
match_indent = true


# BLINDS

# Scaling: trying to hook led to performing arithmetic on nil value error, so I had to overwrite instead
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "function Blind:change_colour(blind_col)"
position = "before" # before, after, or at
payload = """get_blind_amount_ref = get_blind_amount
function get_blind_amount(ante)
  if blind_level ~= nil then
    local amounts = {300, 800, 2000, 5000, 11000, 20000, 35000, 50000}
    if blind_level_old <= 1 then
      if not G.GAME.modifiers.scaling or G.GAME.modifiers.scaling == 1 then 
        amounts = {300, 800, 2000, 5000, 11000, 20000, 35000, 50000}
      elseif G.GAME.modifiers.scaling == 2 then
        amounts = {300, 900, 2600, 8000, 20000, 36000, 60000, 100000}
      elseif G.GAME.modifiers.scaling == 3 then
        amounts = {300, 1000, 3200, 9000, 25000, 60000, 110000, 200000}
      end
      local k = 0.75
      if ante < 1 then return 100 end
      if ante <= 8 then return amounts[ante] end
      local a, b, c, d = amounts[8],1.6,ante-8, 1 + 0.2*(ante-8)
      local amount = math.floor(a*(b+(k*c)^d)^c)
      amount = amount - amount%(10^math.floor(math.log10(amount)-1))
      if amount ~= amount then return 6.4 * (10^306) end
      return amount
    elseif blind_level_old == 2 then
      if not G.GAME.modifiers.scaling or G.GAME.modifiers.scaling == 1 then 
        amounts = {540, 1200, 3200, 8000, 20000, 38000, 64000, 100000}
      elseif G.GAME.modifiers.scaling == 2 then
        amounts = {540, 1500, 4000, 11000, 32000, 62000, 120000, 200000}
      elseif G.GAME.modifiers.scaling == 3 then
        amounts = {540, 1800, 5000, 14000, 40000, 90000, 210000, 400000}
      end
      local k = 0.75
      if ante < 1 then return 100 end
      if ante <= 8 then return amounts[ante] end
      local a, b, c, d = amounts[8],1.6,ante-8, 1 + 0.2*(ante-8)
      local amount = math.floor(a*(b+(k*c)^d)^c)
      amount = amount - amount%(10^math.floor(math.log10(amount)-1))
      if amount ~= amount then return 6.4 * (10^306) end
      return amount
    elseif blind_level_old == 3 then
      if not G.GAME.modifiers.scaling or G.GAME.modifiers.scaling == 1 then 
        amounts = {840, 2300, 6400, 17000, 40000, 72000, 130000, 250000}
      elseif G.GAME.modifiers.scaling == 2 then
        amounts = {840, 2600, 7500, 21000, 54000, 140000, 260000, 500000}
      elseif G.GAME.modifiers.scaling == 3 then
        amounts = {840, 3000, 8500, 25000, 70000, 220000, 520000, 1000000}
      end
      local k = 0.75
      if ante < 1 then return 100 end
      if ante <= 8 then return amounts[ante] end
      local a, b, c, d = amounts[8],1.6,ante-8, 1 + 0.2*(ante-8)
      local amount = math.floor(a*(b+(k*c)^d)^c)
      amount = amount - amount%(10^math.floor(math.log10(amount)-1))
      if amount ~= amount then return 6.4 * (10^306) end
      return amount
    elseif blind_level_old >= 4 then
      if not G.GAME.modifiers.scaling or G.GAME.modifiers.scaling == 1 then 
        amounts = {1200, 3400, 9000, 25000, 88000, 170000, 320000, 600000}
      elseif G.GAME.modifiers.scaling == 2 then
        amounts = {1200, 3800, 11000, 36000, 120000, 300000, 640000, 1200000}
      elseif G.GAME.modifiers.scaling == 3 then
        amounts = {1200, 4200, 14000, 48000, 160000, 450000, 1300000, 2400000}
      end
      local k = 0.75
      if ante < 1 then return 100 end
      if ante <= 8 then return amounts[ante] end
      local a, b, c, d = amounts[8],1.6,ante-8, 1 + 0.2*(ante-8)
      local amount = math.floor(a*(b+(k*c)^d)^c)
      amount = amount - amount%(10^math.floor(math.log10(amount)-1))
      if amount ~= amount then return 6.4 * (10^306) end
      return amount
    end
  else
    get_blind_amount_ref(ante)
  end
end
"""
match_indent = true


# Blind levels require a massive overhaul to the system of disabling blinds
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "v.ability.crimson_heart_chosen = nil"
position = "at" # before, after, or at
payload = "if false then end"
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.GAME.blind:load(saveTable.BLIND)"
position = "after" # before, after, or at
payload = """if saveTable.BLIND.name == 'Cerulean Bell' and blind_level >= 2 then
  for i = 1, #G.hand.cards do
    G.hand.cards[i].ability.forced_selection = nil
  end
  G.hand:unhighlight_all()
  for i = 1, #G.hand.cards do
    print("card"..i..": cerulean1 = "..tostring(G.hand.cards[i].cerulean1))
    print("card"..i..": cerulean2 = "..tostring(G.hand.cards[i].cerulean2))
    if G.hand.cards[i].cerulean1 then
      G.hand.cards[i].ability.forced_selection = true
      G.hand:add_to_highlighted(G.hand.cards[i])
    elseif G.hand.cards[i].cerulean2 then
      G.hand.cards[i].ability.forced_selection = true
      G.hand:add_to_highlighted(G.hand.cards[i])
    end
  end
end"""
match_indent = true

# Blind level changes mid-blind
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "function Blind:set_blind(blind, reset, silent)"
position = "after" # before, after, or at
payload = """  local prev_level = blind_level
  blind_level_chicot_luchador("set blind")
  self:set_text()
  if out_of_blind == 0 and prev_level ~= blind_level then
    print("(out of blind) previous level: "..prev_level)
    print("(out of blind) new level: "..blind_level)

    function wall(level)
      if level >= 0 then
        return level + 1
      elseif level <= -1 then
        return (2^level)
      end
    end

    function vessel(level)
      if level >= 0 then
        return (level*2) + 1
      elseif level <= -1 then
        return (3^level)
      end
    end

    if self.name == 'The Water' then
      ease_discard(math.min(G.GAME.round_resets.discards, prev_level) - math.min(G.GAME.round_resets.discards, blind_level))
    elseif self.name == 'The Needle' then
      ease_hands_played(math.min(G.GAME.round_resets.hands - 1, prev_level) - math.min(G.GAME.round_resets.hands - 1, blind_level))
    elseif self.name == 'The Manacle' then
      G.hand:change_size(math.min(2, prev_level) - math.min(2, blind_level))
    elseif self.name == 'The Wall' then
      self.chips = (self.chips / wall(prev_level) * wall(blind_level))
      self.chip_text = number_format(self.chips)
    elseif self.name == 'Violet Vessel' then
      self.chips = (self.chips / vessel(prev_level) * vessel(blind_level))
      self.chip_text = number_format(self.chips)
    elseif (self.name == 'The Wheel' or self.name == 'The House' or self.name == 'The Mark' or self.name == 'The Fish') and blind_level >= 1 then 
      for i = 1, #G.hand.cards do
        if G.hand.cards[i].facing == 'front' then
          if self.name == 'The Wheel' and G.hand.cards[i].wheel then
            G.hand.cards[i]:flip()
          elseif self.name == 'The House' and G.hand.cards[i].wheel then
            G.hand.cards[i]:flip()
          elseif self.name == 'The Mark' and G.hand.cards[i]:is_face(true) then
            G.hand.cards[i]:flip()
          elseif self.name == 'The Fish' and G.hand.cards[i].wheel then 
            G.hand.cards[i]:flip()
          end
        end
      end
    elseif (self.name == 'The Wheel' or self.name == 'The House' or self.name == 'The Mark' or self.name == 'The Fish') and blind_level <= 0 then 
      for i = 1, #G.hand.cards do
        if G.hand.cards[i].facing == 'back' then
          G.hand.cards[i]:flip()
        end
      end
    elseif self.name == 'Amber Acorn' and blind_level <= 0 then
      for k, v in ipairs(G.jokers.cards) do
        if v.facing == 'back' then v:flip() end
      end
    elseif self.name == 'Amber Acorn' and blind_level >= 1 then
      G.jokers:unhighlight_all()
      for k, v in ipairs(G.jokers.cards) do
        v:flip()
      end
      if #G.jokers.cards > 1 then 
        G.E_MANAGER:add_event(Event({ trigger = 'after', delay = 0.2, func = function() 
          G.E_MANAGER:add_event(Event({ func = function() G.jokers:shuffle('aajk'); play_sound('cardSlide1', 0.85);return true end })) 
          delay(0.15)
          G.E_MANAGER:add_event(Event({ func = function() G.jokers:shuffle('aajk'); play_sound('cardSlide1', 1.15);return true end })) 
          delay(0.15)
          G.E_MANAGER:add_event(Event({ func = function() G.jokers:shuffle('aajk'); play_sound('cardSlide1', 1);return true end })) 
          delay(0.5)
        return true end })) 
      end
    elseif self.name == 'Cerulean Bell' and blind_level <= 0 then
      print("blind 0") 
      for i = 1, #G.hand.cards do
        G.hand.cards[i].ability.forced_selection = nil
      end
      G.hand:unhighlight_all()
    elseif self.name == 'Cerulean Bell' and blind_level == 1 then
      print("blind 1") 
      for i = 1, #G.hand.cards do
        G.hand.cards[i].ability.forced_selection = nil
      end
      G.hand:unhighlight_all()
      for i = 1, #G.hand.cards do
        if G.hand.cards[i].cerulean1 then
          G.hand.cards[i].ability.forced_selection = true
          G.hand:add_to_highlighted(G.hand.cards[i])
        end
      end
    elseif self.name == 'Cerulean Bell' and blind_level >= 2 and prev_level <= 1 then 
      print("blind 2") 
      for i = 1, #G.hand.cards do
        G.hand.cards[i].ability.forced_selection = nil
      end
      G.hand:unhighlight_all()
      for i = 1, #G.hand.cards do
        if G.hand.cards[i].cerulean1 then
          G.hand.cards[i].ability.forced_selection = true
          G.hand:add_to_highlighted(G.hand.cards[i])
        elseif G.hand.cards[i].cerulean2 then
          G.hand.cards[i].ability.forced_selection = true
          G.hand:add_to_highlighted(G.hand.cards[i])
        end
      end
    elseif self.name == 'Crimson Heart' and blind_level <= 0 then
      for i = 1, #G.jokers.cards do
        G.jokers.cards[i].ability.crimson_heart_chosen = nil
        self:debuff_card(G.jokers.cards[i], false)
        SMODS.recalc_debuff(G.jokers.cards[i])
      end
    elseif self.name == 'Crimson Heart' and blind_level == 1 then
      for i = 1, #G.jokers.cards do
        if G.jokers.cards[i].crimson1 then
          G.jokers.cards[i].ability.crimson_heart_chosen = true
          self:debuff_card(G.jokers.cards[i], true)
        elseif G.jokers.cards[i].crimson2 then
          G.jokers.cards[i].ability.crimson_heart_chosen = nil
          self:debuff_card(G.jokers.cards[i], false)
        end
        SMODS.recalc_debuff(G.jokers.cards[i])
      end
    elseif self.name == 'Crimson Heart' and blind_level >= 2 then
      for i = 1, #G.jokers.cards do
        if G.jokers.cards[i].crimson1 or G.jokers.cards[i].crimson2 then
          G.jokers.cards[i].ability.crimson_heart_chosen = true
          self:debuff_card(G.jokers.cards[i], true)
          SMODS.recalc_debuff(G.jokers.cards[i])
        end
      end
    end

    G.E_MANAGER:add_event(Event({
      trigger = 'immediate',
      func = function()
      if self.boss and G.GAME.chips - G.GAME.blind.chips >= 0 then
        G.STATE = G.STATES.NEW_ROUND
        G.STATE_COMPLETE = false
      end
      return true
    end
    }))
    
  end
  out_of_blind = out_of_blind * 0"""
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'The Manacle' and not self.disabled then"
position = "at" # before, after, or at
payload = "if false then"
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "function Blind:defeat(silent)"
position = "after" # before, after, or at
payload = """luchadors_sold = 0
out_of_blind = 1
for i=1, #G.playing_cards do
  G.playing_cards[i].wheel = nil
  G.playing_cards[i].cerulean1 = nil
  G.playing_cards[i].cerulean2 = nil
end
for i=1, #G.jokers.cards do
  G.jokers.cards[i].crimson1 = nil
  G.jokers.cards[i].crimson2 = nil
end
if self.name == 'The Manacle' and not self.disabled then 
  G.hand:change_size(math.min(2, blind_level))
end
blind_level_chicot_luchador("defeat blind")"""
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "function Game:start_run(args)"
position = "after" # before, after, or at
payload = "luchadors_sold = 0"
match_indent = true

# The Hook
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "for i = 1, 2 do"
position = "at" # before, after, or at
payload = "for i = 1, (blind_level+1) do"
match_indent = true

# The Tooth
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "ease_dollars(-1)"
position = "at" # before, after, or at
payload = """ease_dollars(-blind_level)
G.GAME.blind.triggered = true"""
match_indent = true

# The Water
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "ease_discard(-self.discards_sub)"
position = "at" # before, after, or at
payload = "ease_discard(-math.min(self.discards_sub, blind_level))"
match_indent = true

# The Needle
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "ease_hands_played(-self.hands_sub)"
position = "at" # before, after, or at
payload = "ease_hands_played(-math.min(self.hands_sub, blind_level))"
match_indent = true

# The Arm
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "level_up_hand(self.children.animatedSprite, handname, nil, -1)"
position = "at" # before, after, or at
payload = """if blind_level ~= 0 then
  level_up_hand(self.children.animatedSprite, handname, nil, math.max(-G.GAME.hands[handname].level+1, -blind_level))
  G.GAME.blind.triggered = true
end"""
match_indent = true

# The Manacle
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "G.hand:change_size(-1)"
position = "at" # before, after, or at
payload = "G.hand:change_size(math.max(-2, -blind_level))"
match_indent = true

# Level 2+ debuff bosses now not only debuff cards, but reverse them
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_chip_bonus()"
position = "after" # before, after, or at
payload = """if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 then
  if self.ability.effect == 'Stone Card' or self.config.center.replace_base_card then
    return -(self.ability.bonus + (self.ability.perma_bonus or 0))
  end
  return -(self.base.nominal + self.ability.bonus + (self.ability.perma_bonus or 0))
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_chip_mult()"
position = "after" # before, after, or at
payload = """if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 then
  if self.ability.set == 'Joker' then return 0 end
  if self.ability.effect == "Lucky Card" then 
    if pseudorandom('lucky_mult') < G.GAME.probabilities.normal/math.max(1, (5 - (enhance_level-1))) then
      self.lucky_trigger = true
      return -self.ability.mult
    else
      return 0
    end
  else  
    return -self.ability.mult
  end
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_chip_x_mult(context)"
position = "after" # before, after, or at
payload = """if self.ability.x_mult == nil then self.ability.x_mult = 0 end
if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 and not (self.ability.x_mult == 0) then
  if self.ability.set == 'Joker' then return 0 end  
  return math.floor(100/self.ability.x_mult)/100
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_chip_h_mult()"
position = "after" # before, after, or at
payload = """if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 then
  if self.ability.set == 'Joker' then return 0 end  
  return -self.ability.h_mult
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_chip_h_x_mult()"
position = "after" # before, after, or at
payload = """if self.ability.h_x_mult == nil then self.ability.h_x_mult = 0 end
if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 and not (self.ability.h_x_mult == 0) then
  if self.ability.set == 'Joker' then return 0 end  
  return math.floor(100/self.ability.h_x_mult)/100
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_edition()"
position = "before" # before, after, or at
payload = """function Card:get_chip_x_chips()
    if self.ability.x_chips == nil then self.ability.x_chips = 0 end
    if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 and not (self.ability.x_chips == 0) then
      return math.floor(100/self.ability.x_chips)/100
    elseif self.debuff then return 0 end
    return self.ability.x_chips
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_edition()"
position = "after" # before, after, or at
payload = """if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 then
  if self.edition then
        local ret = {card = self}
        if self.edition.p_dollars then
            ret.p_dollars_mod = -self.edition.p_dollars
        end
        if self.edition.x_mult then 
            ret.x_mult_mod = math.floor(100/self.edition.x_mult)/100
        end
        if self.edition.mult then 
            ret.mult_mod = -self.edition.mult
        end
        if self.edition.chips then 
            ret.chip_mod = -self.edition.chips
        end
        return ret
    end

end"""
match_indent = true

# Verdant Leaf
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.set == 'Joker' and G.GAME.blind and G.GAME.blind.name == 'Verdant Leaf' then"
position = "after" # before, after, or at
payload = """if blind_level >= 1 and not (self.ability.name == "Luchador") then
  luchadors_sold = luchadors_sold + 1
  blind_level_chicot_luchador(text)
elseif false then"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.3, blocking = false,"
position = "before" # before, after, or at
payload = "end"
match_indent = true

# The Ox
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "ease_dollars(-G.GAME.dollars, true)"
position = "at" # before, after, or at
payload = """if blind_level ~= 0 then
  ease_dollars(G.GAME.dollars*math.max(-1, (blind_level*-1)))
end"""
match_indent = true

# Amber Acorn
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'Amber Acorn' and not reset and #G.jokers.cards > 0 then"
position = "at" # before, after, or at
payload = "if self.name == 'Amber Acorn' and not (blind_level <= 0) and not reset and #G.jokers.cards > 0 then"
match_indent = true

# The Flint
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "return math.max(math.floor(mult*0.5 + 0.5), 1), math.max(math.floor(hand_chips*0.5 + 0.5), 0), true"
position = "at" # before, after, or at
payload = """if blind_level >= 1 then
  return math.max(math.floor(mult/(blind_level+1) + 0.5), 1), math.max(math.floor(hand_chips/(blind_level+1) + 0.5), 0), true
elseif blind_level <= -1 then
  return math.max(math.floor(mult*(-blind_level+1) + 0.5), 1), math.max(math.floor(hand_chips*(-blind_level+1) + 0.5), 0), true
end
"""
match_indent = true

# The Wheel
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'The Wheel' and pseudorandom(pseudoseed('wheel')) < G.GAME.probabilities.normal/7 then"
position = "at" # before, after, or at
payload = """if self.name == 'The Wheel' and blind_level >= 1 and pseudorandom(pseudoseed('wheel')) < G.GAME.probabilities.normal/math.max(1, 8-blind_level) then
  card.wheel = true"""
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "local disp_text = (self.config.blind.name == 'The Wheel' and G.GAME.probabilities.normal or '')..self.loc_debuff_text"
position = "at" # before, after, or at
payload = "local disp_text = self.loc_debuff_text"
match_indent = true

# The Fish
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'The Fish' and self.prepped then"
position = "at" # before, after, or at
payload = """if self.name == 'The Fish' and blind_level >= 1 and self.prepped then
  card.wheel = true"""
match_indent = true

# The Mark
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'The Mark' and card:is_face(true) then"
position = "at" # before, after, or at
payload = "if self.name == 'The Mark' and blind_level >= 1 and card:is_face(true) then"
match_indent = true

# The House
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'The House' and G.GAME.current_round.hands_played == 0 and G.GAME.current_round.discards_used == 0 then"
position = "at" # before, after, or at
payload = """if self.name == 'The House' and blind_level >= 1 and (G.GAME.current_round.hands_played == 0 and G.GAME.current_round.discards_used == 0) then
  card.wheel = true"""
match_indent = true

# Psychic, Eye, Mouth
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if G.GAME.blind and G.boss_throw_hand and self.STATE == self.STATES.SELECTING_HAND then"
position = "at" # before, after, or at
payload = "if G.GAME.blind and G.boss_throw_hand and blind_level >= 1 and (self.STATE == self.STATES.SELECTING_HAND) then"
match_indent = true


# Unimplemented bosses: Crimson Heart, Cerulean Bell

# DECKS

# Level 2 / Level 3 / Level 4
[[patches]]
[patches.pattern]
target = "back.lua"
pattern = "if self.effect.config.voucher then"
position = "before" # before, after, or at
payload = """if self.effect.config.level ~= nil then
  set_levels(self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level)
  blind_level_old = self.effect.config.level
  out_of_blind = 1
  for k, v in pairs(G.GAME.hands) do
    level_up_hand(self, k, true, self.effect.config.level-1)
  end
else
  set_levels(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
  blind_level_old = 1
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "local cardAreas = saveTable.cardAreas"
position = "before" # before, after, or at
payload = """
  mult_level = saveTable.LEVEL.mult
  xmult_level = saveTable.LEVEL.xmult
  chips_level = saveTable.LEVEL.chips
  econ_level = saveTable.LEVEL.econ
  effect_level = saveTable.LEVEL.effect
  tarot_level = saveTable.LEVEL.tarot
  planet_level = saveTable.LEVEL.planet
  spectral_level = saveTable.LEVEL.spectral
  enhance_level = saveTable.LEVEL.enhance
  edition_level = saveTable.LEVEL.edition
  pack_level = saveTable.LEVEL.pack
  tag_level = saveTable.LEVEL.tag
  voucher_level = saveTable.LEVEL.voucher
  blind_level = saveTable.LEVEL.blind
  blind_level_old = saveTable.LEVEL.blind_old
  out_of_blind = saveTable.LEVEL.out
  luchadors_sold = saveTable.LEVEL.luchador
  set_centers()"""
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if (not G.SETTINGS.tutorial_complete) and G.SETTINGS.tutorial_progress.completed_parts['big_blind'] then G.SETTINGS.tutorial_complete = true end"
position = "before" # before, after, or at
payload = """
  mult_level = 1
  xmult_level = 1
  chips_level = 1
  econ_level = 1
  effect_level = 1
  tarot_level = 1
  planet_level = 1
  spectral_level = 1
  enhance_level = 1
  edition_level = 1
  pack_level = 1
  tag_level = 1
  voucher_level = 1
  blind_level = 1
  blind_level_old = 1
  out_of_blind = 1
  luchadors_sold = 0
  set_centers()"""
match_indent = true




















 
